---------------------------------------------------------------------
-- QA_MEASUREMENT_DUPLICATES_DETAIL
-- Identifies duplicate records in the MEASUREMENT table based on key fields
---------------------------------------------------------------------

WITH TMP_DUPES AS (
    SELECT 
        PERSON_ID,
        MEASUREMENT_CONCEPT_ID,
        MEASUREMENT_DATE,
        MEASUREMENT_DATETIME,
        MEASUREMENT_TYPE_CONCEPT_ID,
        OPERATOR_CONCEPT_ID,
        VALUE_AS_NUMBER,
        VALUE_AS_CONCEPT_ID, 
        UNIT_CONCEPT_ID,
        RANGE_LOW,
        RANGE_HIGH,
        PROVIDER_ID,
        VISIT_OCCURRENCE_ID,
        MEASUREMENT_SOURCE_VALUE,
        MEASUREMENT_SOURCE_CONCEPT_ID,
        UNIT_SOURCE_VALUE,
        VALUE_SOURCE_VALUE,
        COUNT(*) AS CNT
    FROM CARE_RES_OMOP_DEV2_WKSP.OMOP.MEASUREMENT_RAW AS T1
    WHERE T1.MEASUREMENT_CONCEPT_ID <> 0
        AND T1.MEASUREMENT_CONCEPT_ID IS NOT NULL
        AND T1.PERSON_ID <> 0 
        AND T1.PERSON_ID IS NOT NULL
    GROUP BY 
        PERSON_ID,
        MEASUREMENT_CONCEPT_ID,
        MEASUREMENT_DATE,
        MEASUREMENT_DATETIME,
        MEASUREMENT_TYPE_CONCEPT_ID,
        OPERATOR_CONCEPT_ID,
        VALUE_AS_NUMBER,
        VALUE_AS_CONCEPT_ID,
        UNIT_CONCEPT_ID,
        RANGE_LOW,
        RANGE_HIGH,
        PROVIDER_ID,
        VISIT_OCCURRENCE_ID,
        MEASUREMENT_SOURCE_VALUE,
        MEASUREMENT_SOURCE_CONCEPT_ID,
        UNIT_SOURCE_VALUE,
        VALUE_SOURCE_VALUE
    HAVING COUNT(*) > 1
)

SELECT 
    CAST(GETDATE() AS DATE) AS RUN_DATE,
    'MEASUREMENT' AS STANDARD_DATA_TABLE,
    'DUPLICATE' AS QA_METRIC,
    'RECORDS' AS METRIC_FIELD,
    'FATAL' AS ERROR_TYPE,
    ME.MEASUREMENT_ID
FROM TMP_DUPES AS D
INNER JOIN CARE_RES_OMOP_DEV2_WKSP.OMOP.MEASUREMENT_RAW AS ME 
    ON D.PERSON_ID = ME.PERSON_ID
    AND D.MEASUREMENT_CONCEPT_ID = ME.MEASUREMENT_CONCEPT_ID
    AND D.MEASUREMENT_DATE = ME.MEASUREMENT_DATE
    AND COALESCE(D.MEASUREMENT_DATETIME,'1900-01-01') = COALESCE(ME.MEASUREMENT_DATETIME,'1900-01-01')
    AND D.MEASUREMENT_TYPE_CONCEPT_ID = ME.MEASUREMENT_TYPE_CONCEPT_ID
    AND COALESCE(D.OPERATOR_CONCEPT_ID, 0) = COALESCE(ME.OPERATOR_CONCEPT_ID, 0)
    AND COALESCE(D.VALUE_AS_NUMBER, 0) = COALESCE(ME.VALUE_AS_NUMBER, 0)
    AND COALESCE(D.VALUE_AS_CONCEPT_ID, 0) = COALESCE(ME.VALUE_AS_CONCEPT_ID, 0)
    AND COALESCE(D.UNIT_CONCEPT_ID, 0) = COALESCE(ME.UNIT_CONCEPT_ID, 0)
    AND COALESCE(D.RANGE_LOW, 0) = COALESCE(ME.RANGE_LOW, 0)
    AND COALESCE(D.RANGE_HIGH, 0) = COALESCE(ME.RANGE_HIGH, 0)
    AND COALESCE(D.PROVIDER_ID, 0) = COALESCE(ME.PROVIDER_ID, 0)
    AND COALESCE(D.VISIT_OCCURRENCE_ID, 0) = COALESCE(ME.VISIT_OCCURRENCE_ID, 0)
    AND COALESCE(D.MEASUREMENT_SOURCE_VALUE, '0') = COALESCE(ME.MEASUREMENT_SOURCE_VALUE, '0')
    AND COALESCE(D.MEASUREMENT_SOURCE_CONCEPT_ID, 0) = COALESCE(ME.MEASUREMENT_SOURCE_CONCEPT_ID, 0)
    AND COALESCE(D.UNIT_SOURCE_VALUE, '0') = COALESCE(ME.UNIT_SOURCE_VALUE, '0')
    AND COALESCE(D.VALUE_SOURCE_VALUE, '0') = COALESCE(ME.VALUE_SOURCE_VALUE, '0');

/*
Column Descriptions:
------------------
RUN_DATE: Date the QA check was executed
STANDARD_DATA_TABLE: Name of the table being checked (MEASUREMENT)
QA_METRIC: Type of QA check being performed (DUPLICATE)
METRIC_FIELD: Field being evaluated (RECORDS)
ERROR_TYPE: Severity of the error (FATAL)
MEASUREMENT_ID: Unique identifier for the measurement record

Logic:
------
1. TMP_DUPES CTE identifies records that have exact matches across all relevant fields
2. Only includes records where MEASUREMENT_CONCEPT_ID and PERSON_ID are valid (not 0 or NULL)
3. Groups by all relevant fields to find instances where COUNT(*) > 1
4. Main query joins back to MEASUREMENT_RAW to get the MEASUREMENT_IDs of duplicate records
5. COALESCE is used to handle NULL values in the comparison
6. Results show all instances where a measurement record is duplicated

LEGAL DISCLAIMER:
This code is provided "AS IS" without warranty of any kind.
The entire risk as to the quality and performance of the code is with you.
Should the code prove defective, you assume the cost of all necessary
servicing, repair or correction.
*/