/*
QA_CONDITION_OCCURRENCE_NONSTANDARD_DETAIL

This query identifies non-standard concepts in the CONDITION_OCCURRENCE table
by checking concept mappings against standard vocabularies.

*/

WITH NONSTANDARD_DETAIL AS (
    -- Check for non-standard CONDITION_CONCEPT_ID
    SELECT 
        'CONDITION_CONCEPT_ID' AS METRIC_FIELD,
        'NON-STANDARD' AS QA_METRIC, 
        'INVALID DATA' AS ERROR_TYPE,
        CONDITION_OCCURRENCE_ID AS CDT_ID
    FROM CARE_RES_OMOP_DEV2_WKSP.OMOP.CONDITION_OCCURRENCE_RAW AS CO
    LEFT JOIN CARE_RES_OMOP_GEN_WKSP.OMOP.CONCEPT AS C
        ON CO.CONDITION_CONCEPT_ID = C.CONCEPT_ID 
        AND upper(C.DOMAIN_ID) = 'CONDITION'
        AND upper(C.VOCABULARY_ID) IN ('SNOMED','OMOP EXTENSION')
    WHERE CONDITION_CONCEPT_ID <> 0 
        AND CONDITION_CONCEPT_ID IS NOT NULL 
        AND (STANDARD_CONCEPT <> 'S' OR STANDARD_CONCEPT IS NULL)

    UNION ALL

    -- Check for non-standard CONDITION_TYPE_CONCEPT_ID  
    SELECT 
        'CONDITION_TYPE_CONCEPT_ID' AS METRIC_FIELD,
        'NON-STANDARD' AS QA_METRIC,
        'INVALID DATA' AS ERROR_TYPE,
        CONDITION_OCCURRENCE_ID AS CDT_ID
    FROM CARE_RES_OMOP_DEV2_WKSP.OMOP.CONDITION_OCCURRENCE_RAW AS CO
    LEFT JOIN CARE_RES_OMOP_GEN_WKSP.OMOP.CONCEPT AS C
        ON CO.CONDITION_TYPE_CONCEPT_ID = C.CONCEPT_ID
        AND upper(C.DOMAIN_ID) = 'TYPE CONCEPT' 
        AND upper(C.CONCEPT_CLASS_ID) = 'TYPE CONCEPT'
    WHERE CONDITION_TYPE_CONCEPT_ID <> 0
        AND CONDITION_TYPE_CONCEPT_ID IS NOT NULL
        AND (STANDARD_CONCEPT <> 'S' OR STANDARD_CONCEPT IS NULL)

    UNION ALL

    -- Check for non-standard CONDITION_SOURCE_CONCEPT_ID
    SELECT 
        'CONDITION_SOURCE_CONCEPT_ID' AS METRIC_FIELD,
        'NON-STANDARD' AS QA_METRIC,
        'INVALID DATA' AS ERROR_TYPE,
        CONDITION_OCCURRENCE_ID AS CDT_ID
    FROM CARE_RES_OMOP_DEV2_WKSP.OMOP.CONDITION_OCCURRENCE_RAW AS CO
    LEFT JOIN CARE_RES_OMOP_GEN_WKSP.OMOP.CONCEPT AS C
        ON CO.CONDITION_SOURCE_CONCEPT_ID = C.CONCEPT_ID
        AND upper(C.DOMAIN_ID) = 'CONDITION'
        AND C.CONCEPT_CLASS_ID IN ('ICD9CM','ICD10CM')
    WHERE CONDITION_SOURCE_CONCEPT_ID <> 0
        AND CONDITION_SOURCE_CONCEPT_ID IS NOT NULL 
        AND (C.CONCEPT_ID IS NOT NULL)

    UNION ALL

    -- Check for non-standard CONDITION_STATUS_CONCEPT_ID
    SELECT 
        'CONDITION_STATUS_CONCEPT_ID' AS METRIC_FIELD,
        'NON-STANDARD' AS QA_METRIC,
        'INVALID DATA' AS ERROR_TYPE,
        CONDITION_OCCURRENCE_ID AS CDT_ID
    FROM CARE_RES_OMOP_DEV2_WKSP.OMOP.CONDITION_OCCURRENCE_RAW AS CO
    LEFT JOIN CARE_RES_OMOP_GEN_WKSP.OMOP.CONCEPT AS C
        ON CO.CONDITION_STATUS_CONCEPT_ID = C.CONCEPT_ID
        AND upper(C.DOMAIN_ID) = 'CONDITION STATUS'
    WHERE CONDITION_STATUS_CONCEPT_ID <> 0
        AND CONDITION_STATUS_CONCEPT_ID IS NOT NULL
        AND (STANDARD_CONCEPT <> 'S' OR STANDARD_CONCEPT IS NULL)
)

SELECT 
    CAST(GETDATE() AS DATE) AS RUN_DATE,
    'CONDITION_OCCURRENCE' AS STANDARD_DATA_TABLE,
    QA_METRIC AS QA_METRIC,
    METRIC_FIELD AS METRIC_FIELD,
    ERROR_TYPE,
    CDT_ID
FROM NONSTANDARD_DETAIL
WHERE ERROR_TYPE <> 'EXPECTED';

/*
Column Descriptions:
- RUN_DATE: Date the QA check was executed
- STANDARD_DATA_TABLE: Name of the table being checked
- QA_METRIC: Type of QA check performed (NON-STANDARD)
- METRIC_FIELD: Field being validated
- ERROR_TYPE: Type of error found (INVALID DATA)
- CDT_ID: CONDITION_OCCURRENCE_ID with the error

Logic:
1. Checks CONDITION_CONCEPT_ID against standard SNOMED/OMOP concepts
2. Validates CONDITION_TYPE_CONCEPT_ID against standard Type Concepts
3. Verifies CONDITION_SOURCE_CONCEPT_ID against ICD9/10 source concepts
4. Confirms CONDITION_STATUS_CONCEPT_ID uses standard status concepts
5. Returns records where non-standard concepts were found

LEGAL DISCLAIMER:
This code is provided "AS IS" without warranty of any kind.
The entire risk as to the quality and performance of the code is with you.
Should the code prove defective, you assume the cost of all necessary
servicing, repair or correction.
*/